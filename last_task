using System;
using System.Collections.Concurrent;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using ConsoleApp1.Utils;
using Iveonik.Stemmers;
using NTextCat;
using NTextCat.Commons;

namespace ConsoleApp1.FifthTask
{
    public class FifthTask
    {
        private const string TfIdfFilePath = @"/Users/user/RiderProjects/ConsoleApp1/ConsoleApp1/Crawler/tf-idf.txt";
        private const string StemmedFolder = @"/Users/user/RiderProjects/ConsoleApp1/ConsoleApp1/Crawler/out";
        private const string Config = @"/Users/user/RiderProjects/ConsoleApp1/ConsoleApp1/SecondTask/identifier.xml";

        public static void Start()
        {
            var fileLines = File.ReadAllLines(TfIdfFilePath);
            ConcurrentDictionary<int, string[]> documentsTerms = new();            
            Parallel.ForEach(Directory.GetFiles(StemmedFolder), filePath =>
            {
                var fileLines1 = File.ReadAllLines(filePath);
                documentsTerms.GetOrAdd(int.Parse(Path.GetFileNameWithoutExtension(filePath)), fileLines1);
            });
            var totalDocumentCount = Directory.GetFiles(ResultsFolder).Length;
            
            ConcurrentDictionary<int, List<DecimalIdfDataClass>> tfIdfCollection = new();
            ConcurrentDictionary<string, decimal> uniqueTerms = new(); // word - tfIdf

            var factory = new RankedLanguageIdentifierFactory();
            var identifier = factory.Load(Config);

            foreach (var fileLine in fileLines)
            {
                var values = fileLine.Split(';', ' ').Where(x=>!string.IsNullOrWhiteSpace(x)).ToArray();
                
                if (values.Length == 0) continue;
                var documentIndex = int.Parse(values[1]);

                if (!tfIdfCollection.ContainsKey(documentIndex))
                {
                    tfIdfCollection.GetOrAdd(documentIndex, new List<DecimalIdfDataClass>());
                }

                var word = values[0];
                var tf = decimal.Parse(values[2]);
                var idf = decimal.Parse(values[3]);
                var tfIdf = decimal.Parse(values[4]);
                tfIdfCollection[documentIndex].Add(new DecimalIdfDataClass
                    {Idf = idf, Tf = tf, Word = word, DocIndex = documentIndex, TfIdf = tfIdf});

                uniqueTerms.GetOrAdd(word, tfIdf);
            }

            var queryVector = new DecimalIdfDataClass[uniqueTerms.Count];
            Console.WriteLine("Введите строку:");
            var t = Console.ReadLine()?.Split(' ');
            var query = t?.Select(x => PrepareWord(identifier, x)).ToArray();
            
            var i1 = 0;
            foreach (var (term, _) in uniqueTerms)
            {
                var numberOfOccurrences = query.Count(x => x == term);
                var tf = numberOfOccurrences / (double) query.Length;

                if (tf == 0)
                {
                    queryVector[i1] = new DecimalIdfDataClass { Word = term};
                    i1++;
                    continue;
                }
                
                var numberOfDocumentsContainingTheTerm = documentsTerms.Count(x => x.Value.Contains(term));
                var idf = Math.Log10(totalDocumentCount / (double) numberOfDocumentsContainingTheTerm);

                var tfIdf = tf * idf;
                queryVector[i1] = new DecimalIdfDataClass()
                {
                    Word = term, TfIdf = Round(tfIdf), Idf = Round(idf), Tf = Round(tf)
                };
                i1++;
            }

            var queryVectorWithoutZero = queryVector.Where(x => x.TfIdf != 0).ToArray();
            Dictionary<int, double> cos = new();

            for (var i = 0; i < totalDocumentCount; i++)
            {
                var v1 = queryVectorWithoutZero;
                var v2 = tfIdfCollection[i];

                var sum = WordJoin(v1, v2);
                var p1 = Math.Sqrt(WordJoin(v1, v1));
                var p2 = Math.Sqrt(WordJoin(v2, v2));

                var cosVal = sum / (p1 * p2);
                cos.Add(i, cosVal);
            }

            cos.OrderByDescending(x => x.Value).Take(10)
                .ForEach(x => Console.WriteLine(x.Key + ";" + Round(x.Value)));
        }

        private static double WordJoin(IEnumerable<DecimalIdfDataClass> v1, IEnumerable<DecimalIdfDataClass> v2)
        {
            return (double) v1.Join(v2,
                    numbers => numbers.Word,
                    numbers => numbers.Word,
                    (first, second) => first.TfIdf * second.TfIdf)
                .Sum();
        }

        private static decimal Round(double val) => Math.Round((decimal) val, 5, MidpointRounding.ToEven);
        
        private static string PrepareWord(RankedLanguageIdentifier identifier, string or)
        {
            var languages = identifier.Identify(or).ToArray();
            var myLanguages = languages.Where(x => x.Item1.Iso639_3 == "eng" || x.Item1.Iso639_3 == "rus").ToArray();
            if (!myLanguages.Any())
            {
                throw new NotSupportedException();
            }

            var max = myLanguages.Min(x => x.Item2);
            var lang = myLanguages.First(x => x.Item2 == max);
            var langCode = lang?.Item1.Iso639_3;
            IStemmer stemmer = langCode switch
            {
                "eng" => new EnglishStemmer(),
                "rus" => new RussianStemmer(),
                _ => throw new Exception()
            };
            var stemmed = stemmer.Stem(or);
            return stemmed;
        }
    }
}
